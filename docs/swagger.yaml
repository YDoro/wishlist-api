basePath: /
definitions:
  domain.Customer:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
  domain.CustomerEditableFields:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  domain.FullfilledWishlist:
    properties:
      customer:
        $ref: '#/definitions/domain.OutgoingCustomer'
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/domain.Product'
        type: array
      title:
        type: string
    type: object
  domain.OutgoingCustomer:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  domain.Product:
    properties:
      category:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      images:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: number
      rating:
        $ref: '#/definitions/domain.Rating'
      updated_at:
        type: string
    type: object
  domain.Rating:
    properties:
      average:
        type: number
      count:
        type: integer
    type: object
  inputs.CreateCustomerRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    type: object
  inputs.CreateWishlistInput:
    properties:
      title:
        type: string
    type: object
  inputs.PwdAuth:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  inputs.UpdateWishlistInput:
    properties:
      items:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  outputs.AuthSuccessResponse:
    properties:
      token:
        type: string
    type: object
  outputs.CreateWishlistResponse:
    properties:
      id:
        type: string
    type: object
  outputs.ErrorResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A powerful API for managing customers wishlists.
  title: Wishlist API GO
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: user credentials
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/inputs.PwdAuth'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/outputs.AuthSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
      summary: Authenticate user
      tags:
      - auth
  /api/customers:
    post:
      consumes:
      - application/json
      parameters:
      - description: Client data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/inputs.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
      summary: Creates a new customer
      tags:
      - customers
  /api/customers/{customerId}:
    delete:
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deletes the given customer
      tags:
      - customers
    get:
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.OutgoingCustomer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Gets given customer data by ID
      tags:
      - customers
    patch:
      consumes:
      - application/json
      parameters:
      - description: Data to update, either name or email or both
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/domain.CustomerEditableFields'
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.OutgoingCustomer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
      security:
      - BearerAuth: []
      summary: updates the given customer
      tags:
      - customers
  /api/customers/{customerId}/wishlists:
    post:
      consumes:
      - application/json
      parameters:
      - description: Customer ID
        in: path
        name: customer
        required: true
        type: string
      - description: Wishlist data
        in: body
        name: wishlist
        required: true
        schema:
          $ref: '#/definitions/inputs.CreateWishlistInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/outputs.CreateWishlistResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
      summary: Creates a new wishlist
      tags:
      - wishlists
  /api/customers/{customerId}/wishlists/{wishListId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: string
      - description: Wishlist ID
        in: path
        name: wishListId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
      summary: Deletes an existing wishlist
      tags:
      - wishlists
    get:
      consumes:
      - application/json
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: string
      - description: Wishlist ID
        in: path
        name: wishListId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.FullfilledWishlist'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
      summary: Retrieves an existing wishlist
      tags:
      - wishlists
    patch:
      consumes:
      - application/json
      description: update wishlist, updates both title and items if given, if you
        want to add a single item you need to pass the whole wishlist
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: string
      - description: Wishlist ID
        in: path
        name: wishListId
        required: true
        type: string
      - description: Wishlist data
        in: body
        name: wishlist
        required: true
        schema:
          $ref: '#/definitions/inputs.UpdateWishlistInput'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
      summary: update wishlist
      tags:
      - wishlists
    put:
      consumes:
      - application/json
      description: update wishlist, updates both title and items if given, if you
        want to add a single item you need to pass the whole wishlist
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: string
      - description: Wishlist ID
        in: path
        name: wishListId
        required: true
        type: string
      - description: Wishlist data
        in: body
        name: wishlist
        required: true
        schema:
          $ref: '#/definitions/inputs.UpdateWishlistInput'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outputs.ErrorResponse'
      summary: update wishlist
      tags:
      - wishlists
securityDefinitions:
  BearerAuth:
    in: Header
    name: Authorization
    type: apiKey
swagger: "2.0"
